@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    @Html.Partial("~/Views/Shared/_Head.cshtml")
    <title></title>

    <style>


        #App {
            height: 100%;
        }

        * {
            margin: 0;
            padding: 0;
        }

        .HeadDiv {
            height: 50px;
            background-color: #393C3C;
            box-sizing: border-box;
            border-bottom: 2px solid #66B1FF;
        }

        .MainDiv {
            height: calc(100% - 50px);
        }

        .MainLeft {
            height: 100%;
            width: 200px;
            float: left;
            background-color: #393C3C;
            overflow: auto;
        }

        .MainRight {
            height: 100%;
            width: calc(100% - 200px);
            float: left;
            background-color: #EFEFEF;
            padding-left: 10px;
            padding-top: 10px;
            box-sizing: border-box;
        }

        .MianContent {
            height: 100%;
            width: 100%;
            background-color: white;
        }

        .Mainfoot {
            clear: both;
        }

        .el-tabs--card > .el-tabs__header .el-tabs__nav {
            border-radius: 0;
        }

        .el-tabs {
            height: calc(100% - 41px);
        }

        .el-tabs__content {
            height: 100%;
        }

        .el-tabs__item {
            box-sizing: border-box;
        }

        .el-tabs__header {
            margin: 0;
        }

        .tabIcon {
            font-size: 15px;
        }

        .TabMenu {
            position: absolute;
            z-index: 9999;
            background-color: #fff;
            border: 1px solid #ebeef5;
            border-radius: 4px;
            box-shadow: 0 2px 12px 0 rgba(0,0,0,.1);
        }
            .TabMenu div {
                box-sizing: border-box;
                padding:4px 10px 7px 10px;
                cursor: pointer;
                font-size: 14px;
            }
                .TabMenu div i {
                    position:relative;
                    top:2px;
                }
                .TabMenu div:hover {
                    background-color: #ecf5ff;
                    color: #66b1ff;
                }

    </style>

    <script type="text/x-template" id="NavMenu">
        <div>
            <template v-for="(v,i) in model">
                <el-menu-item v-if="v.Children==null||v.Children.length==0" :index="v.Id">
                    <span><i v-if="v.IconClass!=''&&v.IconClass!=null" :class="v.IconClass"></i>{{v.MenuName}}</span>
                </el-menu-item>
                <el-submenu v-else :index="v.Id">
                    <template slot="title">
                        <i v-if="v.IconClass!=''&&v.IconClass!=null" :class="v.IconClass"></i>
                        <span>{{v.MenuName}}</span>
                    </template>
                    <cbb :model="v.Children"></cbb>
                </el-submenu>
            </template>
        </div>
    </script>
</head>
<body>
    <div id="App">

        <div class="TabMenu" @@click.stop="tabMenuClick" v-show="TabMenuPosition.visible" ref="TabMenu" :style="{top:TabMenuPosition.top+'px',left:TabMenuPosition.left+'px'}">
            <div v-show="TabMenuPosition.isSetMenu" @@click="refreshTab"  style="color:#67C23A"><i class="icon iconfont icon-reload"></i>刷新</div>
            <div v-show="TabMenuPosition.isSetMenu" @@click="closeThisTab"  style="color:#909399"><i class="icon iconfont icon-close"></i>关闭此标签</div>
            <div v-show="TabMenuPosition.isSetMenu" @@click="closeExcept"  style="color:#E6A23C"><i class="icon iconfont icon-close-circle"></i>关闭除此之外</div>
            <div @@click="closeAll"  style="color:#F56C6C"><i class="icon iconfont icon-close-circle-fill"></i>关闭所有标签</div>
        </div>
        <div class="HeadDiv">

        </div>
        <div class="MainDiv">
            <div class="MainLeft">
                <el-menu default-active="1"
                         ref="Menu"
                         @@open="handleOpen"
                         @@close="handleClose"
                         @@select="addTab"
                         background-color="#393C3C"
                         text-color="#fff"
                         active-text-color="#ffd04b"
                         style="border-right:0">
                    <cbb :model="MenuList"></cbb>
                </el-menu>
            </div>
            <div class="MainRight">
                <div class="MianContent" id="MianContent" @@contextmenu.prevent.stop="tabContextmenu()">
                    <el-tabs v-model="editableTabsValue" type="card" @@tab-remove="removeTab">
                        <el-tab-pane style="height:100%" v-for="(item, index) in editableTabs"
                                     :key="item.name"
                                     :name="item.name"
                                     @*:label="item.title"*@
                                     :closable="item.closable==null?true:item.closable">
                            <span slot="label" @@contextmenu.prevent.stop="tabContextmenu(item.name)"><i v-if="item.IconClass!=null&&item.IconClass!=''" :class="'tabIcon ' + item.IconClass"></i> {{item.title}}</span>
                            <iframe style="border:0;width:100%;height:100%;overflow:auto;" :src="item.content"></iframe>
                        </el-tab-pane>
                    </el-tabs>
                </div>
            </div>

        </div>
        <div class="Mainfoot"></div>
    </div>

</body>

</html>
<script>
    Vue.component('cbb', {
        props: ['model'],
        template: '#NavMenu'
    })
    var $app = new Vue({
        el: "#App",
        data: {
            MenuList: [],
            editableTabsValue: '1',
            editableTabs: [{
                title: '欢迎',
                name: '1',
                content: '/Welcome/Index',
                closable: false
            }],
            tabIndex: 1,
            TabMenuPosition: {
                top: 20,
                left: 20,
                visible: false,
                isSetMenu: false,
                navName: null
            }
        },
        methods: {
            handleOpen: function () {

            },
            handleClose: function () {

            },
            //选择菜单项触发
            addTab: function (index, indexPath) {
                let item = getMenu(this.MenuList, index);
                let temp;
                this.editableTabs.forEach(function (tab, index) {
                    if (item.Id == tab.name) {
                        temp = tab;
                    }
                })
                if (temp != null) {
                    this.editableTabsValue = temp.name;
                    return;
                }

                this.editableTabs.push({
                    title: item.MenuName,
                    name: item.Id,
                    IconClass: item.IconClass,
                    content: item.MenuUrl + "?MenuId=" + item.Id,
                    url: item.MenuUrl
                });
                this.editableTabsValue = item.Id;
            },
            //移除标签触发
            removeTab: function (targetName) {
                let tabs = this.editableTabs;
                let activeName = this.editableTabsValue;
                if (activeName === targetName) {
                    tabs.forEach(function (tab, index) {
                        if (tab.name === targetName) {
                            let nextTab = tabs[index + 1] || tabs[index - 1];
                            if (nextTab) {
                                activeName = nextTab.name;
                            }
                        }
                    });
                }
                this.editableTabsValue = activeName;
                this.editableTabs = tabs.filter(function (tab) { return tab.name !== targetName; });
            },
            tabContextmenu: function (tabName) {
                $app.TabMenuPosition.visible = false;
                if (tabName == null || tabName=="1") {
                    $app.TabMenuPosition.isSetMenu = false;
                }
                else {
                    $app.TabMenuPosition.isSetMenu = true;
                    $app.TabMenuPosition.navName = tabName;
                }
                this.TabMenuPosition.visible = false;
                var cx = event.clientX;
                var cy = event.clientY;
                if (cx + 100 + 100 >= window.screen.width) {
                    $app.TabMenuPosition.left = cx - 100;
                }
                else {
                    $app.TabMenuPosition.left = cx;
                }
                $app.TabMenuPosition.top = cy;
                $app.TabMenuPosition.visible = true;
            },
            tabMenuClick: function () {
            },
            closeThisTab: function () {
                this.$options.methods.removeTab.bind(this)(this.TabMenuPosition.navName);
                this.TabMenuPosition.visible = false;
            },
            refreshTab: function () {
                for (var i = 0; i < this.editableTabs.length; i++) {
                    if (this.editableTabs[i].name == this.TabMenuPosition.navName) {
                        this.editableTabs[i].content = this.editableTabs[i].url + "?MenuId=" + this.editableTabs[i].name + "&r="+ Math.random();
                    }
                }
                this.TabMenuPosition.visible = false;
            },
            closeExcept: function () {
                for (var i = this.editableTabs.length-1; i >0 ; i--) {
                    if (this.editableTabs[i].name != this.TabMenuPosition.navName) {
                        this.$options.methods.removeTab.bind(this)(this.editableTabs[i].name );
                    }
                }
                this.TabMenuPosition.visible = false;
            },
            closeAll: function () {
                for (var i = this.editableTabs.length - 1; i > 0; i--) {
                  
                        this.$options.methods.removeTab.bind(this)(this.editableTabs[i].name);
                }
                this.TabMenuPosition.visible = false;
            }
        }
    });

    axios.post("/Home/GetMenu").then(function (response) {
        $app.MenuList = response.data;
    });

    function getMenu(menuList, navId) {
        var menu;
        for (var i = 0; i < menuList.length; i++) {
            var m = menuList[i];
            if (menu != null) {
                break;
            }
            if (m.Id == navId) {
                menu = m;
            }
            if (menu == null && m.Children != null && m.Children.length > 0) {
                menu = getMenu(m.Children, navId);
            }
        }
        return menu;
    }

</script>